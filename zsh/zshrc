##
## Saturn Valley Intergalactic Standard Command Prompt
##
[ -n "$HOSTNAME" ] && host="$HOSTNAME" || host=`uname -n`
short_host=`echo ${host}|cut -d. -f1`
if [ "$TERM" = "dumb" ]; then
  # We're probably in Emacs M-x shell.
  PROMPT='${short_host} [%~]%# '
else
  if [ -n "$WINDOW" ]; then
    screen=":$WINDOW"
    screen_clear="%{`print \\\\ek\\\\e\\\\134`%}"
  fi
  if [ $TERM = xterm -o $TERM = xterm-color -o $TERM -o SCREEN \
           -o $TERM = cygwin ]; then
    xterm="`print \\\\e`]0;$SHELLPREFIX${short_host}${screen}:%~`print \\\\007`"
  fi
  if [ -n "$SHELLPREFIX" ]; then
    prefix="`tput setaf 0``tput bold`%}$SHELLPREFIX%{`tput sgr0`"
  fi
  cruft="%{${screen_clear}${xterm}${shellprefix}%}"
  color_on="%{`tput setaf ${SHELLCOLOR:-4}``tput bold`%}"
  color_off="%{`tput sgr0`%}"
  PROMPT="${cruft}${color_on}${short_host}${screen}${color_off} [%~]%# "
fi
unset host short_host screen screen_clear xterm prefix cruft color_on color_off

##
## Saturn Valley Pandimensional Uniform Editor Launcher
##
if [ "$OSTYPE" = cygwin ]; then
  v () {
    if [ -z "$*" ]; then
      cygstart --hide gvim.bat
    else
      for fn in "$@"; do
        local winfn="`cygpath -wa "$fn"`"
        cygstart --hide gvim.bat "\"$winfn\""
      done
    fi
  }
  alias vv='gvim.bat -R -'
elif [ "$TERM_PROGRAM" = Apple_Terminal ]; then
  v () {
    if [ -z "$*" ]; then
      mvim
    else
      for fn in "$@"; do
        mvim "$fn"
      done
    fi
  }
  alias vv='mvim -R - > /dev/null'
elif [ -n "$DISPLAY" ]; then
  v () {
    if [ -z "$*" ]; then
      gvim
    else
      for fn in "$@"; do
        gvim "$fn"
      done
    fi
  }
  alias vv='gvim -R -'
elif [ -n "$WINDOW" ]; then
  v () {
    if [ -z "$*" ]; then
      screen -t vi vi
    else
      for fn in "$@"; do
        screen -t "vi $fn" vi "$fn"
      done
    fi
  }
  alias vv='vi -R -'
else
  v () { vi "$@"; }
  alias vv='vi -R -'
fi

##
## Color ls
##
if [ "$TERM" != "dumb" ] && which dircolors > /dev/null; then
  eval "`dircolors -b`"
  alias ls='ls -F --color=auto'
elif [ "$TERM_PROGRAM" = Apple_Terminal ]; then
  alias ls='ls -FG'
else
  alias ls='ls -F'
fi

##
## Quick and dirty
##
alias ss='screen -ls | grep prime > /dev/null && screen -x prime || screen -S prime'
alias aptup='sudo apt-get update; sudo apt-get dist-upgrade'
gman () { man $* | col -b | gview - }

set -o emacs

##
## Don't delete so much.
## Adapted from http://www.zsh.org/mla/users/2009/msg00589.html .
##
_my_extended_wordchars='*?_-.[]~=&;!#$%^(){}<>:@,\\';
_my_extended_wordchars_space="${my_extended_wordchars} "
_my_extended_wordchars_slash="${my_extended_wordchars}/"

# is the current position \-quoted ?
function _is_quoted(){
  test "${BUFFER[$CURSOR-1,CURSOR-1]}" = "\\"
}

_unquote-backward-delete-word(){
  while  _is_quoted
    do zle .backward-kill-word
  done
}

_unquote-forward-delete-word(){
  while  _is_quoted
    do zle .kill-word
  done
}

_unquote-backward-word(){
  while  _is_quoted
    do zle .backward-word
  done
}

_unquote-forward-word(){
  while _is_quoted
    do zle .forward-word
  done
}

_backward-delete-to-space() {
  local WORDCHARS=${_my_extended_wordchars_slash}
  zle .backward-kill-word
  _unquote-backward-delete-word
}

_backward-delete-to-/ () {
  local WORDCHARS=${_my_extended_wordchars}
  zle .backward-kill-word
  _unquote-backward-delete-word
}

_forward-delete-to-space() {
  local WORDCHARS=${_my_extended_wordchars_slash}
  zle .kill-word
  _unquote-forward-delete-word
}

_forward-delete-to-/ () {
  local WORDCHARS=${_my_extended_wordchars}
  zle .kill-word
  _unquote-forward-delete-word
}

_backward-to-space() {
  local WORDCHARS=${_my_extended_wordchars_slash}
  zle .backward-word
  _unquote-backward-word
}

_forward-to-space() {
   local WORDCHARS=${_my_extended_wordchars_slash}
   zle .forward-word
   _unquote-forward-word
}

_backward-to-/ () {
  local WORDCHARS=${_my_extended_wordchars}
  zle .backward-word
  _unquote-backward-word
}

_forward-to-/ () {
  local WORDCHARS=${_my_extended_wordchars}
  zle .forward-word
  _unquote-forward-word
}

zle -N _backward-delete-to-/
zle -N _forward-delete-to-/
zle -N _backward-delete-to-space
zle -N _forward-delete-to-space
zle -N _backward-to-/
zle -N _forward-to-/
#bindkey '^w'      _backward-delete-to-/
bindkey "^[b"      _backward-to-/
bindkey "^[f"      _forward-to-/
bindkey "^[^?"     _backward-delete-to-/
bindkey "^[d"      _foward-delete-to-/
bindkey "^[[3;3~"  _forward-delete-to-/
bindkey "^[[1;3C" _forward-to-/
bindkey "^[[1;3D" _backward-to-/
# Does someone want these?
#bindkey "^[^[[3~" _forward-delete-to-/
#bindkey '^[^w'    _backward-delete-to-space
#bindkey "^[^[[D"  _backward-to-/
#bindkey "^[^[[C"  _forward-to-/
#bindkey "^[^B"    _backward-to-/
#bindkey "^[^F"    _forward-to-/


##
## But wait--there's more (maybe)!
##
[ "$OSTYPE" = cygwin ] && source "$CONFIGDIR/cygwin.bash"
