#! /usr/bin/scsh -s
!#

(define zeteginea-months
  '(("Holy"    0   1)
    ("Earth"   0  25)
    ("Water"   1  19)
    ("Shadow"  2  14)
    ("White"   3   7)
    ("Flame"   4   2)
    ("Wind"    4  26)
    ("Gold"    5  19)
    ("Thunder" 6  14)
    ("Dark"    7   7)
    ("Sea"     7  31)
    ("Black"   8  25)
    ("Twin"    9  19)
    ("Fire"    10 12)
    ("Light"   11  7)))

(define (make-zeteginea-date month day)
  (cons month day))

(define (zeteginea-date/month zd) (car zd))

(define (zeteginea-date/day zd) (cdr zd))

(define (zeteginea-month/name z) (car z))

(define (zeteginea-month/start-month z) (cadr z))

(define (zeteginea-month/start-day z) (caddr z))

(define (find-zeteginea-month month day)
  (let month-iter
      ((months zeteginea-months)
       (prev #f))
    (if (or (null? months)
            (let ((start-month (zeteginea-month/start-month (car months)))
                  (start-day (zeteginea-month/start-day (car months))))
              (or (> start-month month)
                  (and (= start-month month)
                       (> start-day day)))))
        prev
        (month-iter (cdr months) (car months)))))

(define (date->zeteginea-date dt)
  (let* ((month (date:month dt))
         (day (date:month-day dt))
         (year (date:year dt))
         (zeteginea-month (find-zeteginea-month month day)))
    (make-zeteginea-date zeteginea-month
                         (+ 1 (subtract-decoded-times
                               dt
                               (make-date
                                0 0 0
                                (zeteginea-month/start-day zeteginea-month)
                                (zeteginea-month/start-month zeteginea-month)
                                year))))))

(define (subtract-decoded-times dt1 dt2)
  (floor (/ (- (time dt1)
               (time dt2))
            86400)))

(define (print-zeteginea-date zeteginea-date)
  (display (ordinal-name (zeteginea-date/day zeteginea-date)))
  (display " day of the Month of the ")
  (display (zeteginea-month/name (zeteginea-date/month zeteginea-date)))
  (display " Dragon")
  )

(define (ordinal-name number)
  (if (< number 20)
      (list-ref basic-ordinal-names (- number 1))
      (string-append (list-ref basic-tens-ordinal-names
                               (- (floor (/ number 10)) 2))
                     (let ((ones-place (remainder number 10)))
                       (if (= ones-place 0)
                           "ieth"
                           (string-append "y-" (ordinal-name ones-place)))))))

(define basic-ordinal-names
  '("first" "second" "third" "fourth" "fifth" "sixth" "seventh" "eighth" "ninth"
    "tenth" "eleventh" "twelfth" "thirteenth" "fourteenth" "fifteenth" "sixteenth"
    "seventeenth" "eighteenth" "nineteenth"))

(define basic-tens-ordinal-names
  '("twent" "thirt" "fort" "fift" "sixt" "sevent" "eight" "ninet"))

(define (print-today-zeteginea)
  (print-zeteginea-date (date->zeteginea-date (date)))
  (if (not (member "-n" command-line-arguments)) (newline)))

(print-today-zeteginea)